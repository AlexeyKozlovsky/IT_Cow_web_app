{"ast":null,"code":"import axios from 'axios';\nimport { GET_SYMPT_URL_PREFIX } from './config';\n\nclass MessageParser {\n  constructor(actionProvider, state) {\n    this.parse = message => {\n      const lowerCase = message.toLowerCase();\n      var res;\n      console.log(GET_SYMPT_URL_PREFIX + message);\n      axios.get(GET_SYMPT_URL_PREFIX + message, {\n        headers: {\n          'Access-Control-Allow-Origin': '*'\n        }\n      }).then(function (response) {\n        console.log('response is : ' + response.data);\n      }).catch(function (error) {\n        if (error.response) {\n          console.log(error.response.headers);\n        } else if (error.request) {\n          console.log(error.request);\n        } else {\n          console.log(error.message);\n        }\n\n        console.log(error.config);\n      });\n      console.log(res);\n\n      if (lowerCase.includes(\"messageparser\") || lowerCase.includes(\"parse\") || lowerCase.includes(\"parser\") || lowerCase.includes(\"message parser\")) {\n        return this.actionProvider.handleMessageParser();\n      }\n\n      return this.actionProvider.handleDefault();\n    };\n\n    this.actionProvider = actionProvider; // State represents the chatbot state and is passed \n    // in at initalization. You can use it to read chatbot state\n    // inside the messageParser\n\n    this.state = state;\n  }\n\n}\n\nexport default MessageParser;","map":{"version":3,"sources":["/home/alexeykozlovsky/Documents/Hackaton/ROSTELEKOM/frontend/IT_Cow-front_end/src/components/chatbot/MessageParser.js"],"names":["axios","GET_SYMPT_URL_PREFIX","MessageParser","constructor","actionProvider","state","parse","message","lowerCase","toLowerCase","res","console","log","get","headers","then","response","data","catch","error","request","config","includes","handleMessageParser","handleDefault"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,UAArC;;AAEA,MAAMC,aAAN,CAAoB;AAChBC,EAAAA,WAAW,CAACC,cAAD,EAAiBC,KAAjB,EAAwB;AAAA,SAQnCC,KARmC,GAQ1BC,OAAD,IAAa;AACnB,YAAMC,SAAS,GAAGD,OAAO,CAACE,WAAR,EAAlB;AAEA,UAAIC,GAAJ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYX,oBAAoB,GAACM,OAAjC;AACAP,MAAAA,KAAK,CAACa,GAAN,CAAUZ,oBAAoB,GAACM,OAA/B,EAAwC;AAC7CO,QAAAA,OAAO,EAAE;AACP,yCAA+B;AADxB;AADoC,OAAxC,EAGAC,IAHA,CAGK,UAAUC,QAAV,EAAoB;AAC7BL,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBI,QAAQ,CAACC,IAAxC;AACA,OALI,EAKFC,KALE,CAKI,UAAUC,KAAV,EAAiB;AACzB,YAAIA,KAAK,CAACH,QAAV,EAAoB;AAClBL,UAAAA,OAAO,CAACC,GAAR,CAAYO,KAAK,CAACH,QAAN,CAAeF,OAA3B;AACD,SAFD,MAGK,IAAIK,KAAK,CAACC,OAAV,EAAmB;AACnBT,UAAAA,OAAO,CAACC,GAAR,CAAYO,KAAK,CAACC,OAAlB;AACJ,SAFI,MAGA;AACHT,UAAAA,OAAO,CAACC,GAAR,CAAYO,KAAK,CAACZ,OAAlB;AACD;;AACFI,QAAAA,OAAO,CAACC,GAAR,CAAYO,KAAK,CAACE,MAAlB;AACA,OAhBK;AAkBAV,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AAEA,UACEF,SAAS,CAACc,QAAV,CAAmB,eAAnB,KACAd,SAAS,CAACc,QAAV,CAAmB,OAAnB,CADA,IAEAd,SAAS,CAACc,QAAV,CAAmB,QAAnB,CAFA,IAGAd,SAAS,CAACc,QAAV,CAAmB,gBAAnB,CAJF,EAKE;AACA,eAAO,KAAKlB,cAAL,CAAoBmB,mBAApB,EAAP;AACD;;AACD,aAAO,KAAKnB,cAAL,CAAoBoB,aAApB,EAAP;AACD,KA1CkC;;AACjC,SAAKpB,cAAL,GAAsBA,cAAtB,CADiC,CAEjC;AACA;AACA;;AACA,SAAKC,KAAL,GAAaA,KAAb;AACD;;AAPe;;AA8ClB,eAAeH,aAAf","sourcesContent":["import axios from 'axios';\nimport { GET_SYMPT_URL_PREFIX } from './config';\n\nclass MessageParser {\n    constructor(actionProvider, state) {\n      this.actionProvider = actionProvider;\n      // State represents the chatbot state and is passed \n      // in at initalization. You can use it to read chatbot state\n      // inside the messageParser\n      this.state = state\n    }\n  \n    parse = (message) => {\n      const lowerCase = message.toLowerCase();\n\n      var res;\n      console.log(GET_SYMPT_URL_PREFIX+message)\n      axios.get(GET_SYMPT_URL_PREFIX+message, {\n\theaders: {\n\t  'Access-Control-Allow-Origin': '*',\n\t},}).then(function (response) {\n\t\tconsole.log('response is : ' + response.data);\n\t}).catch(function (error) {\n\t\tif (error.response) {\n\t\t  console.log(error.response.headers);\n\t\t} \n\t\telse if (error.request) {\n\t      console.log(error.request);\n\t\t} \n\t\telse {\n\t\t  console.log(error.message);\n\t\t}\n\tconsole.log(error.config);\n});\n    \n      console.log(res)\n  \n      if (\n        lowerCase.includes(\"messageparser\") ||\n        lowerCase.includes(\"parse\") ||\n        lowerCase.includes(\"parser\") ||\n        lowerCase.includes(\"message parser\")\n      ) {\n        return this.actionProvider.handleMessageParser();\n      }\n      return this.actionProvider.handleDefault();\n    };\n  }\n  \n  export default MessageParser;"]},"metadata":{},"sourceType":"module"}