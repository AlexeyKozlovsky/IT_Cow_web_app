{"ast":null,"code":"class ActionProvider {\n  // The action provider receives createChatBotMessage which you can use to define the bots response, and \n  // the setState function that allows for manipulating the bots internal state.\n  constructor(createChatBotMessage, setStateFunc, createClientMessage) {\n    this.handleMessageParser = () => {\n      const messages = this.createChatBotMessage(\"The message parser controls how the bot reads input and decides which action to invoke.\", {\n        widget: \"messageParser\",\n        withAvatar: true\n      });\n      this.addMessageToBotState(messages);\n    };\n\n    this.handleDefault = () => {\n      const message = this.createChatBotMessage(\"Как я могу вам помочь?\", {\n        withAvatar: true\n      });\n      this.addMessageToBotState(message);\n    };\n\n    this.addMessageToBotState = messages => {\n      if (Array.isArray(messages)) {\n        this.setState(state => ({ ...state,\n          messages: [...state.messages, ...messages]\n        }));\n      } else {\n        this.setState(state => ({ ...state,\n          messages: [...state.messages, messages]\n        }));\n      }\n    };\n\n    this.reply = message => {\n      var rep;\n      const mes = message.toLowerCase(); // ЭТО ДЛЯ ДЕМОНТРАЦИИ ТОГО, КАК БОТ ДОЛЖЕН РАБОТАТЬ.\n      // МЫ НЕ ПЫТАЕМСЯ ВЫСТАВИТЬ ЭТО ЗА РАБОТУ БОТА. ЭТО ПРОСТО ДЕМОНСТРАЦИЯ ИДЕИ\n      // В дальнейшем, при корректном подключении API реализовать продемонстрированный\n      // функционал будет несложно\n\n      switch (mes) {\n        case \"здравствуйте, сегодня утром проснулся от кашля\":\n          rep = this.createChatBotMessage(\"Не могли бы вы уточнить какой у вас кашель? Лающий, приступообразный, может кровохаркание?\", {\n            withAvatar: true\n          });\n          break;\n\n        case \"ну, крови точно нет, скорее приступообразный\":\n          rep = this.createChatBotMessage(\"Тогда я могу вам порекомендовать врачей. Желаете ознакомиться со списком или расскажете о симптомах подробнее? Может быть у вас температура?\", {\n            withAvatar: true\n          });\n          break;\n\n        case \"да, давайте поговорим подробнее\":\n          rep = this.createChatBotMessage(\"У вас есть температура?\", {\n            withAvatar: true\n          });\n          break;\n\n        case \"да, температура есть, высокая\":\n          rep = this.createChatBotMessage(\"\", {\n            withAvatar: true\n          });\n          break;\n      }\n\n      this.addMessageToBotState(rep);\n    };\n\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    this.createClientMessage = createClientMessage;\n  }\n\n}\n\nexport default ActionProvider;","map":{"version":3,"sources":["/home/alexeykozlovsky/WebstormProjects/it-cow-test-app/src/components/chatbot/ActionProvider.js"],"names":["ActionProvider","constructor","createChatBotMessage","setStateFunc","createClientMessage","handleMessageParser","messages","widget","withAvatar","addMessageToBotState","handleDefault","message","Array","isArray","setState","state","reply","rep","mes","toLowerCase"],"mappings":"AAAA,MAAMA,cAAN,CAAqB;AACjB;AACA;AACAC,EAAAA,WAAW,CAACC,oBAAD,EAAuBC,YAAvB,EAAqCC,mBAArC,EAA0D;AAAA,SAMrEC,mBANqE,GAM/C,MAAM;AAC1B,YAAMC,QAAQ,GAAG,KAAKJ,oBAAL,CACf,yFADe,EAEf;AAAEK,QAAAA,MAAM,EAAE,eAAV;AAA2BC,QAAAA,UAAU,EAAE;AAAvC,OAFe,CAAjB;AAKA,WAAKC,oBAAL,CAA0BH,QAA1B;AACD,KAboE;;AAAA,SAerEI,aAfqE,GAerD,MAAM;AACpB,YAAMC,OAAO,GAAG,KAAKT,oBAAL,CAA0B,wBAA1B,EAAoD;AAClEM,QAAAA,UAAU,EAAE;AADsD,OAApD,CAAhB;AAIA,WAAKC,oBAAL,CAA0BE,OAA1B;AACD,KArBoE;;AAAA,SAuBrEF,oBAvBqE,GAuB7CH,QAAD,IAAc;AACnC,UAAIM,KAAK,CAACC,OAAN,CAAcP,QAAd,CAAJ,EAA6B;AAC3B,aAAKQ,QAAL,CAAeC,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBT,UAAAA,QAAQ,EAAE,CAAC,GAAGS,KAAK,CAACT,QAAV,EAAoB,GAAGA,QAAvB;AAFc,SAAZ,CAAd;AAID,OALD,MAKO;AACL,aAAKQ,QAAL,CAAeC,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBT,UAAAA,QAAQ,EAAE,CAAC,GAAGS,KAAK,CAACT,QAAV,EAAoBA,QAApB;AAFc,SAAZ,CAAd;AAID;AACF,KAnCoE;;AAAA,SAqCrEU,KArCqE,GAqC5DL,OAAD,IAAa;AACjB,UAAIM,GAAJ;AACA,YAAMC,GAAG,GAAGP,OAAO,CAACQ,WAAR,EAAZ,CAFiB,CAIjB;AACA;AACA;AACA;;AAEA,cAAQD,GAAR;AACI,aAAK,gDAAL;AACID,UAAAA,GAAG,GAAG,KAAKf,oBAAL,CAA0B,4FAA1B,EAAwH;AAC1HM,YAAAA,UAAU,EAAE;AAD8G,WAAxH,CAAN;AAEA;;AACJ,aAAK,8CAAL;AACIS,UAAAA,GAAG,GAAG,KAAKf,oBAAL,CAA0B,8IAA1B,EAA0K;AAC5KM,YAAAA,UAAU,EAAE;AADgK,WAA1K,CAAN;AAEA;;AACJ,aAAK,iCAAL;AACIS,UAAAA,GAAG,GAAG,KAAKf,oBAAL,CAA0B,yBAA1B,EAAqD;AACvDM,YAAAA,UAAU,EAAE;AAD2C,WAArD,CAAN;AAEA;;AACJ,aAAK,+BAAL;AACIS,UAAAA,GAAG,GAAG,KAAKf,oBAAL,CAA0B,EAA1B,EAA8B;AAChCM,YAAAA,UAAU,EAAE;AADoB,WAA9B,CAAN;AAEA;AAhBR;;AAoBA,WAAKC,oBAAL,CAA0BQ,GAA1B;AACL,KAnEsE;;AACnE,SAAKf,oBAAL,GAA4BA,oBAA5B;AACA,SAAKY,QAAL,GAAgBX,YAAhB;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACD;;AAPgB;;AAyEnB,eAAeJ,cAAf","sourcesContent":["class ActionProvider {\n    // The action provider receives createChatBotMessage which you can use to define the bots response, and \n    // the setState function that allows for manipulating the bots internal state.\n    constructor(createChatBotMessage, setStateFunc, createClientMessage) {\n      this.createChatBotMessage = createChatBotMessage;\n      this.setState = setStateFunc;\n      this.createClientMessage = createClientMessage\n    }\n  \n    handleMessageParser = () => {\n      const messages = this.createChatBotMessage(\n        \"The message parser controls how the bot reads input and decides which action to invoke.\",\n        { widget: \"messageParser\", withAvatar: true }\n      );\n  \n      this.addMessageToBotState(messages);\n    };\n  \n    handleDefault = () => {\n      const message = this.createChatBotMessage(\"Как я могу вам помочь?\", {\n        withAvatar: true,\n      });\n  \n      this.addMessageToBotState(message);\n    };\n  \n    addMessageToBotState = (messages) => {\n      if (Array.isArray(messages)) {\n        this.setState((state) => ({\n          ...state,\n          messages: [...state.messages, ...messages],\n        }));\n      } else {\n        this.setState((state) => ({\n          ...state,\n          messages: [...state.messages, messages],\n        }));\n      }\n    };\n\n    reply = (message) => {\n        var rep;\n        const mes = message.toLowerCase()\n\n        // ЭТО ДЛЯ ДЕМОНТРАЦИИ ТОГО, КАК БОТ ДОЛЖЕН РАБОТАТЬ.\n        // МЫ НЕ ПЫТАЕМСЯ ВЫСТАВИТЬ ЭТО ЗА РАБОТУ БОТА. ЭТО ПРОСТО ДЕМОНСТРАЦИЯ ИДЕИ\n        // В дальнейшем, при корректном подключении API реализовать продемонстрированный\n        // функционал будет несложно\n        \n        switch (mes) {\n            case \"здравствуйте, сегодня утром проснулся от кашля\":\n                rep = this.createChatBotMessage(\"Не могли бы вы уточнить какой у вас кашель? Лающий, приступообразный, может кровохаркание?\", {\n                    withAvatar: true});\n                break;\n            case \"ну, крови точно нет, скорее приступообразный\":\n                rep = this.createChatBotMessage(\"Тогда я могу вам порекомендовать врачей. Желаете ознакомиться со списком или расскажете о симптомах подробнее? Может быть у вас температура?\", {\n                    withAvatar: true});\n                break;\n            case \"да, давайте поговорим подробнее\":\n                rep = this.createChatBotMessage(\"У вас есть температура?\", {\n                    withAvatar: true});\n                break; \n            case \"да, температура есть, высокая\":\n                rep = this.createChatBotMessage(\"\", {\n                    withAvatar: true});\n                break;\n        }\n        \n\n        this.addMessageToBotState(rep)\n  }\n}\n  \n  export default ActionProvider;"]},"metadata":{},"sourceType":"module"}